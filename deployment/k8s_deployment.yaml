# Kubernetes Deployment Manifest for Multi-Language Sentiment Analysis Engine
# This file contains all necessary Kubernetes resources for production deployment

apiVersion: v1
kind: Namespace
metadata:
  name: sentiment-analysis
  labels:
    app: sentiment-engine
    environment: production
    version: v1.0.0

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sentiment-engine-config
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
data:
  # Kafka Configuration
  KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
  KAFKA_AUTO_OFFSET_RESET: "latest"
  KAFKA_CONSUMER_GROUP: "sentiment-analysis"
  
  # Redis Configuration
  REDIS_URL: "redis://redis:6379/0"
  REDIS_TIMEOUT: "5"
  
  # API Configuration
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  API_WORKERS: "4"
  API_TIMEOUT: "300"
  
  # Model Configuration
  MODEL_CACHE_DIR: "/app/models"
  DEFAULT_MODEL: "xlm-roberta-base"
  MODEL_MAX_LENGTH: "512"
  BATCH_SIZE: "32"
  
  # Logging Configuration
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  
  # Health Check Configuration
  HEALTH_CHECK_INTERVAL: "30"
  HEALTH_CHECK_TIMEOUT: "10"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: sentiment-engine-secrets
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  DATABASE_PASSWORD: "cGFzc3dvcmQ="  # password
  API_SECRET_KEY: "c2VjcmV0LWtleQ=="  # secret-key
  HUGGINGFACE_TOKEN: "aGZfdG9rZW4="  # hf_token

---
# PersistentVolumeClaim for model storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sentiment-models-pvc
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: ssd  # Use fast SSD storage for models

---
# PersistentVolumeClaim for logs
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sentiment-logs-pvc
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# Deployment for the main sentiment analysis service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sentiment-engine
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
    component: api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sentiment-engine
      component: api
  template:
    metadata:
      labels:
        app: sentiment-engine
        component: api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sentiment-engine-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: sentiment-engine
        image: sentiment-engine:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        envFrom:
        - configMapRef:
            name: sentiment-engine-config
        - secretRef:
            name: sentiment-engine-secrets
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2
            memory: 8Gi
        volumeMounts:
        - name: models-volume
          mountPath: /app/models
        - name: logs-volume
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Allow up to 5 minutes for startup
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: models-volume
        persistentVolumeClaim:
          claimName: sentiment-models-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: sentiment-logs-pvc
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "high-memory"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - sentiment-engine
              topologyKey: kubernetes.io/hostname

---
# Service to expose the sentiment engine
apiVersion: v1
kind: Service
metadata:
  name: sentiment-engine
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
    component: api
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: sentiment-engine
    component: api
  sessionAffinity: None

---
# Internal Service for cluster communication
apiVersion: v1
kind: Service
metadata:
  name: sentiment-engine-internal
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app: sentiment-engine
    component: api

---
# ServiceAccount for RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sentiment-engine-sa
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine

---
# ClusterRole for the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sentiment-engine-role
  labels:
    app: sentiment-engine
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sentiment-engine-binding
  labels:
    app: sentiment-engine
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sentiment-engine-role
subjects:
- kind: ServiceAccount
  name: sentiment-engine-sa
  namespace: sentiment-analysis

---
# HorizontalPodAutoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sentiment-engine-hpa
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sentiment-engine
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: sentiment-engine-pdb
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: sentiment-engine
      component: api

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: sentiment-engine-netpol
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
spec:
  podSelector:
    matchLabels:
      app: sentiment-engine
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: kafka
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: kafka
    ports:
    - protocol: TCP
      port: 9092
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443  # HTTPS for model downloads

---
# ServiceMonitor for Prometheus monitoring (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: sentiment-engine-metrics
  namespace: sentiment-analysis
  labels:
    app: sentiment-engine
    monitoring: enabled
spec:
  selector:
    matchLabels:
      app: sentiment-engine
      component: api
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - sentiment-analysis
